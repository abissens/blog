(()=>{"use strict";var t={3723:function(t,n){var a=this&&this.__awaiter||function(t,n,a,s){return new(a||(a=Promise))((function(e,o){function i(t){try{h(s.next(t))}catch(t){o(t)}}function r(t){try{h(s.throw(t))}catch(t){o(t)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(t){t(n)}))).then(i,r)}h((s=s.apply(t,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.PagesBundle=n.Page=n.Metadata=n.DateMetadata=n.Author=void 0,n.Author=class{constructor(t,n){this.name=t,this.contacts=n}};class s{constructor(t,n,a,s,e,o,i,r,h,u,c,l,d,_){this.date=t,this.i_year=n,this.short_year=a,this.i_month=s,this.month=e,this.short_month=o,this.long_month=i,this.i_day=r,this.day=h,this.short_day=u,this.long_day=c,this.i_hour=l,this.i_minute=d,this.i_second=_}static fromUnknown(t){if(null==t)return;const n=t;return new s(new Date(n.timestamp),n.i_year,n.short_year,n.i_month,n.month,n.short_month,n.long_month,n.i_day,n.day,n.short_day,n.long_day,n.i_hour,n.i_minute,n.i_second)}}n.DateMetadata=s;class e{constructor(t,n,a,s,e,o,i,r){this.title=t,this.urlTitle=n,this.summary=a,this.authors=s,this.tags=e,this.publishingDate=o,this.lastEditDate=i,this.data=r}static fromUnknown(t){if(null==t)return;const n=t;return new e(n.title,n.url_title,n.summary,n.authors,n.tags,s.fromUnknown(n.publishing_date),s.fromUnknown(n.last_edit_date),n.data)}}n.Metadata=e;class o{constructor(t,n,a){this.path=t,this.uri=n,this.metadata=a}static fromUnknown(t){const n=t;return new o(n.page_ref.path,n.page_uri,e.fromUnknown(n.metadata))}}n.Page=o,n.PagesBundle=class{allPages(t=!1){return a(this,void 0,void 0,(function*(){const t=yield fetch("/all_pages.json");if(t.ok)return(yield t.json()).map((t=>o.fromUnknown(t)));throw new Error("cannot load pages")}))}}}},n={};(new(function a(s){var e=n[s];if(void 0!==e)return e.exports;var o=n[s]={exports:{}};return t[s].call(o.exports,o,o.exports,a),o.exports}(3723).PagesBundle)).allPages().then((t=>console.dir(t)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,